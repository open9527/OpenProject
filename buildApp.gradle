apply {
    plugin "com.android.application"
    plugin "com.blankj.api"
    plugin "kotlin-android"
    plugin 'kotlin-kapt'
//    plugin "kotlin-android-extensions"
}

configSigning()
configApkName()

android {
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        minSdkVersion Config.minSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName
        applicationId Config.applicationId + suffix
        targetSdkVersion Config.targetSdkVersion
        multiDexEnabled true

        // 仅保留中文语种的资源
        resConfigs 'zh'

        // 仅保留 xxhdpi 图片资源（目前主流分辨率 1920 * 1080）
        resConfig 'xxhdpi'

        // 仅保留两种架构的 so 库，根据 Bugly 统计得出
        ndk {
            // armeabi：万金油架构平台（占用率：0%）
            // armeabi-v7a：曾经主流的架构平台（占用率：10%）
            // arm64-v8a：目前主流架构平台（占用率：90%）
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            // 移除无用的资源文件
            shrinkResources false
            // ZipAlign 优化
            zipAlignEnabled false
            // 设置混淆
            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", Config.appName + suffix + ".debug"

        }

        release {
            debuggable false
            jniDebuggable false
            // 移除无用的资源文件
            shrinkResources true
            // ZipAlign 优化
            zipAlignEnabled true
            // 设置混淆
            minifyEnabled true
//            consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", Config.appName + suffix
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
    }


    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "8g"
        maxProcessCount 8
        dexInProcess = true
    }

    // 支持 Java JDK 8
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    //支持dataBinding
    dataBinding {
        enabled true
    }

    //支持viewBinding
//    viewBinding {
//        enabled = true
//    }

//    处理dataBinding和kotlin 冲突
    kapt {
        generateStubs = true
    }

}

//dependencies {
//
//}

def getSuffix() {

    if (project.path == ":feature:launcher:feature_launcher_app") return ""

    return project.path.replace(":", "_").substring(":feature".length(), project.path.length() - ":app".length())
}


def configSigning() {

    File signPropertiesFile = file("${rootDir.path}/sign/keystore.properties")
    if (!signPropertiesFile.exists()) return

    project.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            debug {
                storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }

            release {
                storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }

        buildTypes.release.signingConfig signingConfigs.release
    }
//    GLog.d("${project.toString()} sign end...")
}


def configApkName() {
    project.android.applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            def artifact = variant.getPackageApplicationProvider().get()
            artifact.outputDirectory = new File("${rootDir.path}/apk")
            artifact.outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = "open9527" + suffix +
                        (variant.flavorName == "" ? "" : ("_" + variant.flavorName)) +
                        "_" + variant.versionName.replace(".", "_") +
                        "_" + variant.buildType.name +
                        ".apk"
            }
        }
    }
}