apply {
    plugin "com.android.application"
}

android {
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        minSdkVersion Config.minSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName
        applicationId Config.applicationId + suffix
        targetSdkVersion Config.targetSdkVersion
        multiDexEnabled true
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
            resValue "string", "app_name", Config.appName + suffix + ".debug"

        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", Config.appName + suffix
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "8g"
        maxProcessCount 8
        dexInProcess = true
    }

    // 支持 Java JDK 8
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    //支持dataBinding
    dataBinding {
        enabled true
    }

}

//dependencies {
//
//}

def getSuffix() {
//    GLog.d("getSuffix:", project.path)
//    if (project.path == ":feature:launcher:app") return ""
    if (project.path == ":feature:launcher:feature_launcher_app") return ""
    return project.path.replace(":", "_").substring("_feature".length(), project.path.length() - "_app".length())
}


def configSigning() {

    File signPropertiesFile = file("${rootDir.path}/sign/keystore.properties")
    if (!signPropertiesFile.exists()) return

    GLog.d("${project.toString()} sign start...")
    project.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
    GLog.d("${project.toString()} sign end...")
}


def configApkName() {
    project.android.applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            def artifact = variant.getPackageApplicationProvider().get()
            artifact.outputDirectory = new File("${rootDir.path}/apk")
            artifact.outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = "util" + suffix +
                        (variant.flavorName == "" ? "" : ("_" + variant.flavorName)) +
                        "_" + variant.versionName.replace(".", "_") +
                        "_" + variant.buildType.name +
                        ".apk"
            }
        }
    }
}